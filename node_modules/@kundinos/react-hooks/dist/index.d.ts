import { MutableRefObject, RefObject, Dispatch, SetStateAction } from 'react';

declare type UseClickOutsideCallback = (e: MouseEvent) => void;
interface UseClickOutsideParams {
    disabled?: boolean;
    handleEvent?: UseClickOutsideCallback;
}
/**
 * Helps to track click outside specified HTML Element
 *
 * @see http://www.kundinos.ru/docs/react-hooks/hooks/use-click-outside
 */
declare function useClickOutside<T extends HTMLElement>(params?: UseClickOutsideParams): MutableRefObject<T>;

declare type UseCurrentDatePeriod = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | number;
interface UseCurrentDateOptions {
    every?: UseCurrentDatePeriod;
}
declare type UseCurrentDate = (options?: UseCurrentDateOptions) => Date;
/**
 * Returns a stateful current date, that will update every specified period
 *
 * @param options.every The period updating the date. Possible values: millisecond, second (by default), minute, hour, day or custom number of milliseconds
 *
 * @see http://www.kundinos.ru/docs/react-hooks/hooks/use-current-date
 */
declare const useCurrentDate: UseCurrentDate;

declare type TargetElement = Element | HTMLElement | Document | Window;
declare type Options = boolean | UseNativeEventOptions;
declare type EmptyRecord = Record<string, never>;
interface EventItem {
    elem: TargetElement;
    listener: EventListener;
}
declare type Store = {
    current: Record<string, Record<string, EventItem[]>> | EmptyRecord;
};
interface UseNativeEventOptions extends AddEventListenerOptions {
    initial?: boolean;
}
declare type UseNativeEvent = (target: TargetElement | RefObject<TargetElement> | MutableRefObject<TargetElement>, type: string, listener: EventListener, options?: Options) => void;
declare const store: Store;
/**
 * Simplifies the subscribing to events on any HTML element or React ref.
 * Deletes the subscription after unmount component
 *
 * @see http://www.kundinos.ru/docs/react-hooks/hooks/use-native-event
 */
declare const useNativeEvent: UseNativeEvent;

declare type UseDocumentEvent = <K extends keyof DocumentEventMap>(type: K, listener: EventListener, options?: boolean | UseNativeEventOptions) => void;
/**
 * Simplifies the subscribing to events on document. Deletes the subscription after unmount component
 *
 * @see http://www.kundinos.ru/docs/react-hooks/hooks/use-document-event
 */
declare const useDocumentEvent: UseDocumentEvent;

declare type UseFullState = <S>(initialState?: S | (() => S)) => [S, Dispatch<SetStateAction<S>>, S];
/**
 * Works as useState, but contains third parameter with previous value of state
 *
 * @see http://www.kundinos.ru/docs/react-hooks/hooks/use-full-state
 */
declare const useFullState: UseFullState;

interface UseIdleOptions {
    timeout?: number;
    onIdle?: (e?: Event) => void;
    onWakeUp?: (e: Event) => void;
}
declare type UseIdle = (options?: UseIdleOptions) => boolean;
/**
 * Returns a stateful value about user idle or not
 *
 * @see http://www.kundinos.ru/docs/react-hooks/hooks/use-idle
 */
declare const useIdle: UseIdle;

declare type UseIntervalCleanup = void | (() => void);
declare type UseIntervalCallback = () => UseIntervalCleanup;
declare type UseIntervalDelay = null | number;
interface UseIntervalResult {
    resetInterval: () => void;
}
declare type UseInterval = (callback: UseIntervalCallback, delay?: UseIntervalDelay) => UseIntervalResult;
/**
 * Declarative version of `setInterval`
 * @param callback — Callback function, that will be called every interval time
 * @param interval — Time in milliseconds for interval, specify `null` to pause
 *
 * @see http://www.kundinos.ru/docs/react-hooks/hooks/use-interval
 */
declare const useInterval: UseInterval;

declare type Handler = (e: KeyboardEvent) => void;
declare type EventsList = 'onUp' | 'onRight' | 'onDown' | 'onLeft' | 'onArrowLeft' | 'onArrowRight' | 'onArrowUp' | 'onArrowDown' | 'onEscape' | 'onTab' | 'onKeyDown' | 'onKeyPress' | 'onKeyUp' | 'onSpace';
declare type EventsMap = Partial<Record<EventsList, Handler>>;
declare type UseKeyboardEvents = (eventsMap: EventsMap) => void;
/**
 * Simplifies the subscribing to events on keyboard. Deletes the subscriptions after unmount component
 *
 * @param eventsMap Listing event handlers
 *
 * @example
 * useKeyboardEvents({
 *  onEscape: () => console.log('Escape was pressed!'),
 *  onArrowUp: () => console.log('Arrow up was pressed!'),
 * })
 *
 * @see http://www.kundinos.ru/docs/react-hooks/hooks/use-keyboard-events
 */
declare const useKeyboardEvents: UseKeyboardEvents;

declare type MediaQuery = string;
declare type ColorScheme = 'dark' | 'light';
declare type PrefersLanguages = readonly string[];
declare type PrefersReducedMotion = 'no-preference' | 'reduce';

interface OnChangeParams {
    matches: boolean;
    media: string;
}
declare type UseMediaQueryCallback = (params: OnChangeParams) => void;
/**
 * Simplifies to detect when specified media query matches
 *
 * @see http://www.kundinos.ru/docs/react-hooks/hooks/use-media-query
 */
declare function useMediaQuery(media: MediaQuery, onChange: UseMediaQueryCallback): boolean;

declare type MediasMap = {
    [key: MediaQuery]: UseMediaQueryCallback;
};
/**
 * Simplifies to detect when specified media queries matches
 *
 * @see http://www.kundinos.ru/docs/react-hooks/hooks/use-media-queries
 */
declare function useMediaQueries(mediasMap: MediasMap): void;

interface UsePrefersResult {
    colorScheme: ColorScheme;
    languages: PrefersLanguages;
    reducedMotion: PrefersReducedMotion;
}
declare type UsePrefers = () => UsePrefersResult;
/**
 * Simplifies to detect the user preferences
 * Return the prefers color scheme, languages and need to reduce motion
 *
 * @see http://www.kundinos.ru/docs/react-hooks/hooks/use-prefers
 */
declare const usePrefers: UsePrefers;

declare type UsePrefersLanguages = () => PrefersLanguages;
/**
 * Return the array of preferred languages
 *
 * @see http://www.kundinos.ru/docs/react-hooks/hooks/use-prefers-languages
 */
declare const usePrefersLanguages: UsePrefersLanguages;

declare type UsePrefersReducedMotion = () => PrefersReducedMotion;
/**
 * Simplifies to detect if the user has requested a light or dark color theme
 *
 * @see http://www.kundinos.ru/docs/react-hooks/hooks/use-prefers-reduced-motion
 */
declare const usePrefersReducedMotion: UsePrefersReducedMotion;

interface UsePrefersColorSchemeResult {
    theme: ColorScheme;
    isDark: boolean;
    isLight: boolean;
}
declare type UsePrefersColorScheme = () => Partial<UsePrefersColorSchemeResult>;
/**
 * Simplifies to detect if the user has requested a light or dark color theme
 *
 * @see http://www.kundinos.ru/docs/react-hooks/hooks/use-prefers-color-scheme
 */
declare const usePrefersColorScheme: UsePrefersColorScheme;

declare type UseWindowResize = (listener: EventListener, options?: boolean | UseNativeEventOptions) => void;
/**
 * Simplifies the subscribing to resize of window.
 * Deletes the subscription after unmount component
 *
 * @see http://www.kundinos.ru/docs/react-hooks/hooks/use-window-resize
 */
declare const useWindowResize: UseWindowResize;

interface UseScrollPosition {
    x: number;
    y: number;
}
interface UseScrollPositions {
    previous?: UseScrollPosition;
    current?: UseScrollPosition;
}
declare type UseScrollCallback = (positions?: UseScrollPositions) => void;
declare type UseScroll = (listener: UseScrollCallback, options?: boolean | UseNativeEventOptions) => void;
/**
 * Simplifies the subscribing to scroll of window and has previous/current scroll positions.
 * Deletes the subscription after unmount component
 *
 * @see http://www.kundinos.ru/docs/react-hooks/hooks/use-scroll
 */
declare const useScroll: UseScroll;

declare type UseTimeoutCleanup = void | (() => void);
declare type UseTimeoutCallback = () => UseTimeoutCleanup;
declare type UseTimeoutDelay = number;
interface UseTimeoutResult {
    reset: () => void;
    repeat: () => void;
}
declare type UseTimeout = (callback: UseTimeoutCallback, delay?: UseTimeoutDelay) => UseTimeoutResult;
/**
 * Declarative version of setTimeout
 * @param callback - Callback function, that will be called after specified delay time
 * @param delay — Time in milliseconds for timeout
 *
 * @see http://www.kundinos.ru/docs/react-hooks/hooks/use-timeout
 */
declare const useTimeout: UseTimeout;

declare type UseToggle = (initialState?: boolean | (() => boolean)) => [boolean, () => void];
/**
 * Returns a state with true/false value and function for his toggle
 *
 * @param initialState The initial state for the toggle switch
 *
 * @see http://www.kundinos.ru/docs/react-hooks/hooks/use-toggle
 */
declare const useToggle: UseToggle;

declare type UseWindowEvent = <K extends keyof WindowEventMap>(type: K, listener: EventListener, options?: boolean | UseNativeEventOptions) => void;
/**
 * Simplifies the subscribing to events on window. Deletes the subscription after unmount component
 *
 * @see http://www.kundinos.ru/docs/react-hooks/hooks/use-window-event
 */
declare const useWindowEvent: UseWindowEvent;

export { ColorScheme, EventsList, EventsMap, Handler, MediaQuery, PrefersLanguages, PrefersReducedMotion, UseClickOutsideCallback, UseClickOutsideParams, UseCurrentDate, UseCurrentDateOptions, UseCurrentDatePeriod, UseDocumentEvent, UseFullState, UseIdle, UseIdleOptions, UseInterval, UseIntervalCallback, UseIntervalCleanup, UseIntervalDelay, UseIntervalResult, UseKeyboardEvents, UseMediaQueryCallback, UseNativeEvent, UseNativeEventOptions, UsePrefers, UsePrefersColorScheme, UsePrefersColorSchemeResult, UsePrefersLanguages, UsePrefersReducedMotion, UsePrefersResult, UseScroll, UseScrollCallback, UseScrollPosition, UseScrollPositions, UseTimeout, UseTimeoutCallback, UseTimeoutCleanup, UseTimeoutDelay, UseTimeoutResult, UseToggle, UseWindowEvent, UseWindowResize, store, useClickOutside, useCurrentDate, useDocumentEvent, useFullState, useIdle, useInterval, useKeyboardEvents, useMediaQueries, useMediaQuery, useNativeEvent, usePrefers, usePrefersColorScheme, usePrefersLanguages, usePrefersReducedMotion, useScroll, useTimeout, useToggle, useWindowEvent, useWindowResize };
